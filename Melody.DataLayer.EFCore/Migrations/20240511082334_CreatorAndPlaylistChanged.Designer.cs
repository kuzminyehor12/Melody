// <auto-generated />
using System;
using Melody.DataLayer.EFCore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melody.DataLayer.EFCore.Migrations
{
    [DbContext(typeof(MelodyDbContext))]
    [Migration("20240511082334_CreatorAndPlaylistChanged")]
    partial class CreatorAndPlaylistChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FollowedAlbums", b =>
                {
                    b.Property<Guid>("FollowedAlbumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAlbumsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAlbums");
                });

            modelBuilder.Entity("FollowedAudioBookCollections", b =>
                {
                    b.Property<Guid>("FollowedAudioBookCollectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAudioBookCollectionsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAudioBookCollections");
                });

            modelBuilder.Entity("FollowedAudioBooks", b =>
                {
                    b.Property<Guid>("FollowedAudioBooksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAudioBooksId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAudioBooks");
                });

            modelBuilder.Entity("FollowedPlaylists", b =>
                {
                    b.Property<Guid>("FollowedPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedPlaylistsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedPlaylists");
                });

            modelBuilder.Entity("FollowedPodcasts", b =>
                {
                    b.Property<Guid>("FollowedPodcastsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedPodcastsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedPodcasts");
                });

            modelBuilder.Entity("FollowedTracks", b =>
                {
                    b.Property<Guid>("FollowedTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedTracksId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedTracks");
                });

            modelBuilder.Entity("GenredTracks", b =>
                {
                    b.Property<Guid>("GenredTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uuid");

                    b.HasKey("GenredTracksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GenredTracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("AudioBookCollections");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AudioBookCollectionId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AudioBookCollectionId");

                    b.HasIndex("CreatorId");

                    b.ToTable("AudioBooks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d57b44e-db5d-4dc2-b259-4ef15f740d38"),
                            DisplayName = "Pop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("38d30822-fd65-4115-9c77-7136184a0a97"),
                            DisplayName = "Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3d8fade5-15f0-43af-94eb-80ad99aed386"),
                            DisplayName = "Hip-hop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8d79d5c4-e162-4a6c-9ed7-682277a8e58d"),
                            DisplayName = "R&B(Rhythm and Blues)",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e3775be3-53f2-4433-8378-6786a22f14ed"),
                            DisplayName = "Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4c084bd8-d009-4bb0-b8e8-f7a046634029"),
                            DisplayName = "Blues",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4286b3c3-7bca-434c-9d6f-9b822a5a1eb8"),
                            DisplayName = "Country",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5460f98a-3ebb-4e58-8241-74afee4e84b3"),
                            DisplayName = "Reggae",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b03c9ba2-e887-47c8-8982-977435c9a4f3"),
                            DisplayName = "Electronic",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c8fc7d77-df8a-4eb2-8865-51b2829c4c93"),
                            DisplayName = "Classical",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("93f8afe5-8255-46bc-9358-1fc918c31ce7"),
                            DisplayName = "Folk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("eab6ea67-f5de-4da8-934a-f1a3b15d5ab4"),
                            DisplayName = "Indie",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9ef14a9e-94dc-4b88-9e64-6a50ad831e9d"),
                            DisplayName = "Alternative",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("59e3b1e7-9fc5-459c-9d12-e7429d74b68e"),
                            DisplayName = "Punk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("27e36861-9119-41bb-a6d7-5fb7664b7ece"),
                            DisplayName = "Metal",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("08666190-a164-4e93-add4-8e475bb6d4c5"),
                            DisplayName = "Dance",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("95cbb02b-68fc-4c32-8eda-8d1bf71b8033"),
                            DisplayName = "Soul",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a3c6a334-d062-4cf8-a246-20a783ea6ddb"),
                            DisplayName = "Funk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3c749998-06c3-49e7-826e-483e859c214c"),
                            DisplayName = "Gospel",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a6805439-0afb-40a6-b1f5-88e34d22d4b7"),
                            DisplayName = "Disco",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c72afb39-e92a-444d-b3e7-1966e2318ab5"),
                            DisplayName = "Ska",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("40ce1754-af94-4ff2-a1cd-32611df916fb"),
                            DisplayName = "Dub",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c98e5d6d-ad89-486e-8368-e7590dd75f01"),
                            DisplayName = "Techno",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a0b56ea4-71c8-45e9-878a-1cd12a784249"),
                            DisplayName = "House",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("51b047b4-acfd-4c93-b816-dd3073b6dcfd"),
                            DisplayName = "Ambient",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1a0f1f77-b77e-4201-b413-977a8d83073b"),
                            DisplayName = "Trance",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4d3ea84b-aecf-482c-a4e3-5c8c4769c016"),
                            DisplayName = "Rap",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("44aec6a7-e02c-4ac3-86ee-9028fe5ad0da"),
                            DisplayName = "Grunge",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d75b3de8-e78d-4805-bb12-6d65a8910999"),
                            DisplayName = "Reggaeton",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cdd4d798-19db-497b-bce4-a96e6e09b01f"),
                            DisplayName = "Latin",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1183ca5e-9da2-4ec5-9af6-a6ae4778a645"),
                            DisplayName = "Salsa",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("00b1fbb8-2da3-4779-b263-dd2fb34ee068"),
                            DisplayName = "Flamenco",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d1412740-4278-436b-acd0-f0eece8be1d6"),
                            DisplayName = "Bossa Nova",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("59067fd2-4de4-4b23-a6fc-f8cc6548cf99"),
                            DisplayName = "Afrobeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0062322d-5ec3-4705-8ae3-6804114a252f"),
                            DisplayName = "Samba",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("52a0c3e5-9674-4ca3-b305-b41e2bab34de"),
                            DisplayName = "Bluegrass",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("dcbecd59-8d5c-4133-85e0-3106afd13f82"),
                            DisplayName = "Funk Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("39162b1f-2d1d-4ff1-a0a5-bd58b58db30a"),
                            DisplayName = "Hard Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("efead40b-22e2-43ab-8704-051a1d59bee3"),
                            DisplayName = "Soft Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("df7bd5e6-5fc1-41d0-ad87-c77345a810ee"),
                            DisplayName = "Glam Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3d795582-448b-4a74-8987-9c5fd285867b"),
                            DisplayName = "Psychedelic Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("627e96f7-0eb6-403f-8bab-c7106c3597ef"),
                            DisplayName = "Post-rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7bd8405e-cae0-4e32-a3c6-c81e9e6244cf"),
                            DisplayName = "Garage Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("edd869fb-64eb-4911-97ba-83124d909874"),
                            DisplayName = "Progressive Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("08efe8e7-567f-4e54-bb59-da0cdcc9ccde"),
                            DisplayName = "New Wave",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("06500d0a-3443-4e8a-a2b1-ce01faca5f9b"),
                            DisplayName = "Post-punk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("15119d80-7ebb-483a-a37c-df7376d8baf8"),
                            DisplayName = "Shoegaze",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("39071fbd-c332-4a9d-bbdb-befb64ba45a2"),
                            DisplayName = "Celtic",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d55efbbe-eead-4c5e-8471-fedb281ecdfa"),
                            DisplayName = "World Music",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("740079ef-b614-4673-9f07-bcea2e9e9cf8"),
                            DisplayName = "Fusion",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c914ba84-40fe-4fdf-8fc3-4432bfbb8717"),
                            DisplayName = "Experimental",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9e69e404-8ce6-4a72-9f17-455307e69cae"),
                            DisplayName = "IDM(Intelligent Dance Music)",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("38e1a0f8-82f2-46a6-9c93-d5498d4ef186"),
                            DisplayName = "Synthpop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b59ae2d6-7438-4c99-98c6-af89bb88518a"),
                            DisplayName = "Electropop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1c35a743-a388-4a39-a771-0357e21f792e"),
                            DisplayName = "Trap",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7c7611db-d1cf-4f45-ae2d-8701fbd41d47"),
                            DisplayName = "Drill",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b0e3447c-dc17-4688-aa7a-f8c76811bdd8"),
                            DisplayName = "Breakbeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("181c6484-2f40-4be0-a474-fb61598d488e"),
                            DisplayName = "Downtempo",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d9a90ddf-cce6-4dfd-a1f6-10d4c7610229"),
                            DisplayName = "Ambient House",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("11630268-6dea-4450-85aa-54fef93694c4"),
                            DisplayName = "Dubstep",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6bbf2897-ee08-4b14-bf50-d32aef3479a8"),
                            DisplayName = "Future Bass",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2e14dcce-2a82-4016-83ba-1f4b9db661e3"),
                            DisplayName = "Grime",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("22f512cb-7eec-40e0-a768-742afbc5b5c7"),
                            DisplayName = "Trip-hop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8e9459ee-211a-49a2-83cd-7766e10e026f"),
                            DisplayName = "Nu Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5667cbd2-6c58-434a-9484-b6aada5e096e"),
                            DisplayName = "Smooth Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b4a5b53a-d748-44b0-b0ce-158079ae08d8"),
                            DisplayName = "Swing",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f55b5e32-17a1-4f21-9214-467bbcec4277"),
                            DisplayName = "Bebop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cd52656b-bc01-4641-ada2-982c2b6581d6"),
                            DisplayName = "Big Band",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("adfe03e2-8f9c-4ad3-b625-6f0d999f43bb"),
                            DisplayName = "Orchestral",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("15e0c0a1-dae8-47e4-8f75-458b21188648"),
                            DisplayName = "Choral",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e56b673c-cb7c-4d27-8b6f-eb1f5df37e06"),
                            DisplayName = "Phonk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b42512c5-768f-4b12-b6f7-11685a130bc7"),
                            DisplayName = "Alternative Metal",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7f8c2fb9-eedc-42c6-92dd-e902d09877b8"),
                            DisplayName = "Eurobeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("00f15f10-004c-4b07-8a60-02287d1e0b45"),
                            DisplayName = "Synthwave",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7eae6a0c-5f23-4e77-9151-cdf2e24893fe"),
                            DisplayName = "Post-hardcore",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PlaylistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("ExternalIds")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PodcastEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TrackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlaylistedTracks", b =>
                {
                    b.Property<Guid>("PlaylistedTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistsId")
                        .HasColumnType("uuid");

                    b.HasKey("PlaylistedTracksId", "PlaylistsId");

                    b.HasIndex("PlaylistsId");

                    b.ToTable("PlaylistedTracks");
                });

            modelBuilder.Entity("TaggedPlaylists", b =>
                {
                    b.Property<Guid>("TaggedPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("TaggedPlaylistsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TaggedPlaylists");
                });

            modelBuilder.Entity("FollowedAlbums", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AlbumEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedAudioBookCollections", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAudioBookCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedAudioBooks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAudioBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedPlaylists", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedPodcasts", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PodcastEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedPodcastsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenredTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("GenredTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Albums")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("AudioBooksCollection")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", "AudioBookCollection")
                        .WithMany("AudioBooks")
                        .HasForeignKey("AudioBookCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("AudioBooks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioBookCollection");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", "User")
                        .WithOne("Creator")
                        .HasForeignKey("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PlaylistEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Playlists")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PodcastEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Podcasts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TrackEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AlbumEntity", "Album")
                        .WithMany("AlbumedTracks")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Tracks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PlaylistedTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaggedPlaylists", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("TaggedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.Navigation("AlbumedTracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.Navigation("AudioBooks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("AudioBooks");

                    b.Navigation("AudioBooksCollection");

                    b.Navigation("Playlists");

                    b.Navigation("Podcasts");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.UserEntity", b =>
                {
                    b.Navigation("Creator")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
