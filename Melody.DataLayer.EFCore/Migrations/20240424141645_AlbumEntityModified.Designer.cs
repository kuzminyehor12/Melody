// <auto-generated />
using System;
using Melody.DataLayer.EFCore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melody.DataLayer.EFCore.Migrations
{
    [DbContext(typeof(MelodyDbContext))]
    [Migration("20240424141645_AlbumEntityModified")]
    partial class AlbumEntityModified
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FollowedAlbums", b =>
                {
                    b.Property<Guid>("FollowedAlbumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAlbumsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAlbums");
                });

            modelBuilder.Entity("FollowedAudioBookCollections", b =>
                {
                    b.Property<Guid>("FollowedAudioBookCollectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAudioBookCollectionsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAudioBookCollections");
                });

            modelBuilder.Entity("FollowedAudioBooks", b =>
                {
                    b.Property<Guid>("FollowedAudioBooksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAudioBooksId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAudioBooks");
                });

            modelBuilder.Entity("FollowedPlaylists", b =>
                {
                    b.Property<Guid>("FollowedPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedPlaylistsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedPlaylists");
                });

            modelBuilder.Entity("FollowedPodcasts", b =>
                {
                    b.Property<Guid>("FollowedPodcastsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedPodcastsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedPodcasts");
                });

            modelBuilder.Entity("FollowedTracks", b =>
                {
                    b.Property<Guid>("FollowedTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedTracksId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedTracks");
                });

            modelBuilder.Entity("GenredTracks", b =>
                {
                    b.Property<Guid>("GenredTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uuid");

                    b.HasKey("GenredTracksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GenredTracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("AudioBookCollections");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AudioBookCollectionId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AudioBookCollectionId");

                    b.HasIndex("CreatorId");

                    b.ToTable("AudioBooks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8432838d-6743-477d-a27d-1cdfc933e767"),
                            DisplayName = "Pop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bdc20a8e-b6ac-4d58-92a1-4450b9da82de"),
                            DisplayName = "Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8892155d-4f56-478c-b922-81d8c3c817c4"),
                            DisplayName = "Hip-hop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("caf5518d-5b81-4a9d-8a34-aa59d71ebcb5"),
                            DisplayName = "R&B(Rhythm and Blues)",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b24701bf-033e-4942-8176-51e9836a4af7"),
                            DisplayName = "Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("43dc827a-41b0-4968-b5a8-bf1fc8d7532f"),
                            DisplayName = "Blues",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4f48d176-1b49-40e8-8bb6-fb89b57603e2"),
                            DisplayName = "Country",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("eee24d27-e52c-4ff7-ad7d-e70726ed25d9"),
                            DisplayName = "Reggae",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("63987ebe-7acc-40a7-a057-35024ec4bd4e"),
                            DisplayName = "Electronic",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("eb5cedce-031f-4775-86bf-1e0ddd9580be"),
                            DisplayName = "Classical",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("35941234-70d1-4afe-ae9a-4f5c10de89b1"),
                            DisplayName = "Folk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5e018b0b-3364-4aa6-acfb-3eb7a972b1ab"),
                            DisplayName = "Indie",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0386a306-8243-44ed-af86-520e381506f5"),
                            DisplayName = "Alternative",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ae76788b-3e3e-4279-9f44-b6ed39b8a756"),
                            DisplayName = "Punk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("dd55ced2-65c6-4292-9572-4414e030126c"),
                            DisplayName = "Metal",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("eb74198d-177b-42c8-be61-fcea814c6dc7"),
                            DisplayName = "Dance",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4b3b5321-5811-4f6e-9385-68899623336f"),
                            DisplayName = "Soul",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6552065f-f595-4cf7-8699-847f58cd0476"),
                            DisplayName = "Funk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2483790b-ea0d-43bc-95ed-8bb22e8778d7"),
                            DisplayName = "Gospel",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("57124ff5-e1bd-4ce1-a0ac-a10913a91bfe"),
                            DisplayName = "Disco",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("17c90352-6f81-4251-90cc-0634a2385e6b"),
                            DisplayName = "Ska",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bdcd2805-86ac-4dd7-84a5-64c37d04025e"),
                            DisplayName = "Dub",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("69ea6014-b7a1-4912-a96a-cbe4b5eb8495"),
                            DisplayName = "Techno",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f96dc3fb-81ab-4516-b639-4bd5c94f4f5f"),
                            DisplayName = "House",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3358c85e-9b3e-47a0-9770-a60c9d8b61a1"),
                            DisplayName = "Ambient",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("405e3303-3407-4346-b1aa-d61081f25ec3"),
                            DisplayName = "Trance",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("660f9681-93e3-4cc1-a1d2-be53344fd9da"),
                            DisplayName = "Rap",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d1c005e2-2d1d-49c5-95c9-82ff2bef2d39"),
                            DisplayName = "Grunge",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f3e8b831-c2c3-472a-af20-e4b7592da864"),
                            DisplayName = "Reggaeton",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4e457c0a-3a1b-4138-9c4d-391941c30fe9"),
                            DisplayName = "Latin",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ffd04f3b-fd05-46ab-9a7f-ff0f0a9ff076"),
                            DisplayName = "Salsa",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2af15409-0475-4cb4-ad00-bf0009efacf1"),
                            DisplayName = "Flamenco",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("69016d5b-4fa8-416f-bb3c-a0e6bbdf7a3a"),
                            DisplayName = "Bossa Nova",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0f6e835c-d793-4b95-b3b2-9496ff6252cc"),
                            DisplayName = "Afrobeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6ea8949a-c908-46de-94d3-6864bee04d97"),
                            DisplayName = "Samba",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("91fbd483-5271-4b38-9309-626e1f25e792"),
                            DisplayName = "Bluegrass",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("254a7dd3-039c-462f-bfc7-6f9fb25915ba"),
                            DisplayName = "Funk Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b48c3033-7c56-46da-a955-6897ad4c42a7"),
                            DisplayName = "Hard Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("aba5dc73-94e8-458a-945f-1b6edfa09d9a"),
                            DisplayName = "Soft Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("11e70d3c-e7cc-4825-89bf-e572e38952c5"),
                            DisplayName = "Glam Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6a1e7d9c-743d-4914-97a0-0599897fbf97"),
                            DisplayName = "Psychedelic Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("18319e9c-6185-4d22-bdbc-fec90e0dc34e"),
                            DisplayName = "Post-rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("58832317-b5a0-422d-9958-003371cd641c"),
                            DisplayName = "Garage Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("787b880c-0ab0-469b-b80a-99292a6f74d4"),
                            DisplayName = "Progressive Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e19bfa91-b50e-4e02-a815-d86da5d3bf58"),
                            DisplayName = "New Wave",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("205ecb01-11d8-445e-85c7-3661b0370957"),
                            DisplayName = "Post-punk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("dd924d22-c683-4e73-87fe-95715de44cd5"),
                            DisplayName = "Shoegaze",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a38dde20-2b7f-4de3-a3f7-7d7c2e0b25dd"),
                            DisplayName = "Celtic",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3402ce41-cd34-4997-a88e-94304ed49b91"),
                            DisplayName = "World Music",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e69a03ba-58e9-4597-86b4-7ce2902ff147"),
                            DisplayName = "Fusion",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("59aa16ab-0834-4c40-aa21-1bb483f933b2"),
                            DisplayName = "Experimental",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c06f0c5e-11dd-4459-99c8-7748d86e051c"),
                            DisplayName = "IDM(Intelligent Dance Music)",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("753e9ceb-1f2b-41cc-93c8-3e6845761d6d"),
                            DisplayName = "Synthpop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("eee1a509-ae38-4ff4-b85c-daf584ca6030"),
                            DisplayName = "Electropop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5da22811-0e85-48b8-91f9-4cf0795f34d7"),
                            DisplayName = "Trap",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cbb8bf96-d1ac-4a4d-9046-65abb75298f3"),
                            DisplayName = "Drill",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6ac40eed-f146-4939-8730-8ddc6b5e667f"),
                            DisplayName = "Breakbeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("426cc605-dc3a-42b7-9dae-b53d5a315d5d"),
                            DisplayName = "Downtempo",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("761992be-c51a-45fb-85bf-74a66eb26ff8"),
                            DisplayName = "Ambient House",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5dc8d20e-aad4-4767-838d-8508b413d336"),
                            DisplayName = "Dubstep",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f51c9f9d-f5d9-4fce-a929-5a16cb9a17c0"),
                            DisplayName = "Future Bass",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("742aa8ad-cdb4-40c6-94bf-96a6d6b3619d"),
                            DisplayName = "Grime",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("19554543-11ae-43ee-9851-e78d722d0fba"),
                            DisplayName = "Trip-hop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5acbd773-1cde-4a86-baac-b5b209f6b41e"),
                            DisplayName = "Nu Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("74fa6a4c-cc18-4e09-93cd-091348af5870"),
                            DisplayName = "Smooth Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7f0a912f-f23d-4bf3-9812-afb95b240507"),
                            DisplayName = "Swing",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4cb9ab32-fcd6-4e1b-9996-bf363450ce40"),
                            DisplayName = "Bebop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f9f6ae4c-a4e2-4452-9fc5-8701a6012292"),
                            DisplayName = "Big Band",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("abdc8d31-7b05-4786-8aea-1f1d24722db2"),
                            DisplayName = "Orchestral",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b61d0b70-bd25-4ed0-8815-76cd80bb8a97"),
                            DisplayName = "Choral",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("84fb5f64-abb2-408f-95e7-ce6f63b0d0cd"),
                            DisplayName = "Phonk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("93231613-35bd-440b-91ed-32a966096bd0"),
                            DisplayName = "Alternative Metal",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6163b5f6-3b41-4d54-90a9-e1e3400bdf31"),
                            DisplayName = "Eurobeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b5ebf614-b2af-4f53-9b38-e88d7bf86968"),
                            DisplayName = "Synthwave",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4b9707f3-d335-42b9-85c5-46563867a632"),
                            DisplayName = "Post-hardcore",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PlaylistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PodcastEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TrackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlaylistedTracks", b =>
                {
                    b.Property<Guid>("PlaylistedTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistsId")
                        .HasColumnType("uuid");

                    b.HasKey("PlaylistedTracksId", "PlaylistsId");

                    b.HasIndex("PlaylistsId");

                    b.ToTable("PlaylistedTracks");
                });

            modelBuilder.Entity("TaggedPlaylists", b =>
                {
                    b.Property<Guid>("TaggedPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("TaggedPlaylistsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TaggedPlaylists");
                });

            modelBuilder.Entity("FollowedAlbums", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AlbumEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedAudioBookCollections", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAudioBookCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedAudioBooks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAudioBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedPlaylists", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedPodcasts", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PodcastEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedPodcastsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenredTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("GenredTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Albums")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("AudioBooksCollection")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", "AudioBookCollection")
                        .WithMany("AudioBooks")
                        .HasForeignKey("AudioBookCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("AudioBooks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioBookCollection");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", "User")
                        .WithOne("Creator")
                        .HasForeignKey("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PlaylistEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Playlists")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PodcastEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Podcasts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TrackEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AlbumEntity", "Album")
                        .WithMany("AlbumedTracks")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Tracks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PlaylistedTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaggedPlaylists", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("TaggedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.Navigation("AlbumedTracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.Navigation("AudioBooks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("AudioBooks");

                    b.Navigation("AudioBooksCollection");

                    b.Navigation("Playlists");

                    b.Navigation("Podcasts");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.UserEntity", b =>
                {
                    b.Navigation("Creator")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
