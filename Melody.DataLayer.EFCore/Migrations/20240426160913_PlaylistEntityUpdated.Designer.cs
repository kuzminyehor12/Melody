// <auto-generated />
using System;
using Melody.DataLayer.EFCore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melody.DataLayer.EFCore.Migrations
{
    [DbContext(typeof(MelodyDbContext))]
    [Migration("20240426160913_PlaylistEntityUpdated")]
    partial class PlaylistEntityUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FollowedAlbums", b =>
                {
                    b.Property<Guid>("FollowedAlbumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAlbumsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAlbums");
                });

            modelBuilder.Entity("FollowedAudioBookCollections", b =>
                {
                    b.Property<Guid>("FollowedAudioBookCollectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAudioBookCollectionsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAudioBookCollections");
                });

            modelBuilder.Entity("FollowedAudioBooks", b =>
                {
                    b.Property<Guid>("FollowedAudioBooksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAudioBooksId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAudioBooks");
                });

            modelBuilder.Entity("FollowedPlaylists", b =>
                {
                    b.Property<Guid>("FollowedPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedPlaylistsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedPlaylists");
                });

            modelBuilder.Entity("FollowedPodcasts", b =>
                {
                    b.Property<Guid>("FollowedPodcastsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedPodcastsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedPodcasts");
                });

            modelBuilder.Entity("FollowedTracks", b =>
                {
                    b.Property<Guid>("FollowedTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedTracksId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedTracks");
                });

            modelBuilder.Entity("GenredTracks", b =>
                {
                    b.Property<Guid>("GenredTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uuid");

                    b.HasKey("GenredTracksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GenredTracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("AudioBookCollections");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AudioBookCollectionId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AudioBookCollectionId");

                    b.HasIndex("CreatorId");

                    b.ToTable("AudioBooks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb1a6360-a84e-46b0-9250-840223296733"),
                            DisplayName = "Pop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cf7edf14-1a2a-4638-9c57-f2edcf073c44"),
                            DisplayName = "Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3b0fd9fd-1281-49a0-85f7-2fc93dba0e5c"),
                            DisplayName = "Hip-hop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e4f38c15-4481-4ffd-9adf-a30da0a60748"),
                            DisplayName = "R&B(Rhythm and Blues)",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0b6d6e4d-ca7b-429e-ab44-a12a5c550f2e"),
                            DisplayName = "Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("aeb8e094-945e-46db-9181-636b35c85c8e"),
                            DisplayName = "Blues",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f44b43f6-0d3b-401d-a44a-978025894f87"),
                            DisplayName = "Country",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9cfc51db-51db-428b-ada2-86ce16477069"),
                            DisplayName = "Reggae",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9136e492-620e-4137-b962-24ed684693cd"),
                            DisplayName = "Electronic",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a75a6f5d-b2a0-4cbc-beea-c5794c320c25"),
                            DisplayName = "Classical",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("55392c28-7592-46c4-898c-f1eb684a08f7"),
                            DisplayName = "Folk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("14ebc21f-6fb3-474c-b7c1-87e382cd4bd5"),
                            DisplayName = "Indie",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2e82dc74-b175-4c26-a70d-f210657dfd4b"),
                            DisplayName = "Alternative",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6ce4f27b-4693-49b1-b1bb-91f559800f55"),
                            DisplayName = "Punk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("aa56f411-c5ab-4490-8757-9bb719907e64"),
                            DisplayName = "Metal",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b27b25be-9a5d-48c8-abf6-ea20d18fef7b"),
                            DisplayName = "Dance",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c6877381-3634-41fb-923f-9e7ae8a997c6"),
                            DisplayName = "Soul",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cc92a862-d6a8-4b4b-832c-a3c905d01864"),
                            DisplayName = "Funk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4eb5ce91-8187-4b18-95ca-b143037a2a65"),
                            DisplayName = "Gospel",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("aaf3cec6-4274-4cb5-9415-6f64ba91ca56"),
                            DisplayName = "Disco",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("07e5bc0e-5c01-4ab5-9b2b-c13e74e37e18"),
                            DisplayName = "Ska",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fdc2796e-ebf1-4c7b-90d0-1852a9ad52cc"),
                            DisplayName = "Dub",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("73150765-b68b-4b7c-b283-3b1c5dd2ead3"),
                            DisplayName = "Techno",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b589084b-dafb-471e-82e6-5508a02e73ed"),
                            DisplayName = "House",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cce623ba-2d05-42f9-890a-f268e7d76d44"),
                            DisplayName = "Ambient",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5159f4db-0ad4-4e43-891b-f28eebc3616b"),
                            DisplayName = "Trance",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d0e0f8e7-c4ef-4c8d-9c8d-a3199751eb7e"),
                            DisplayName = "Rap",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8eeee62b-d76e-424d-8820-09782d638825"),
                            DisplayName = "Grunge",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("419b8b6d-c5d7-4559-87c3-2ed4090e25b9"),
                            DisplayName = "Reggaeton",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b423e9fa-9a40-4eb1-bfad-f0de8a1cfd47"),
                            DisplayName = "Latin",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5c7208e6-a5ef-48a5-b9e5-b8f5c6d5d249"),
                            DisplayName = "Salsa",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("381c9d20-f79c-435a-b335-a029d863a3bf"),
                            DisplayName = "Flamenco",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("72bf9336-a014-4503-a8bf-0a46b09c2832"),
                            DisplayName = "Bossa Nova",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9950d4c8-28ab-49f1-9eb5-55996ca992f6"),
                            DisplayName = "Afrobeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a8996433-3ae2-470a-84cb-8edf191a1686"),
                            DisplayName = "Samba",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("47a9c936-02d7-40b8-8948-5c0d9c9d4f26"),
                            DisplayName = "Bluegrass",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5052cfcc-a75c-46d0-919b-54e10822eddb"),
                            DisplayName = "Funk Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("721352b8-63fd-4cfe-b912-cc02c1c54b58"),
                            DisplayName = "Hard Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cdcf534a-57db-426e-b041-d09aca90b5ac"),
                            DisplayName = "Soft Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d8a0b4af-30be-4763-b4db-bf616824baf9"),
                            DisplayName = "Glam Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cf393e36-c61a-45e3-b8e7-30f519e384db"),
                            DisplayName = "Psychedelic Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9ce9c252-ff3c-4760-a8de-ae3f88598429"),
                            DisplayName = "Post-rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c4f131f3-ad80-40a8-82ac-2da18fa82a46"),
                            DisplayName = "Garage Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("901843b5-f362-41e3-befc-759e68b39f57"),
                            DisplayName = "Progressive Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2206a270-43cd-405a-b609-03f49d95bfb9"),
                            DisplayName = "New Wave",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8b8c5a1b-f644-423d-8718-9b3a6cb09ee8"),
                            DisplayName = "Post-punk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c5d795ff-11da-4c0e-b7c6-fe6314abfdaa"),
                            DisplayName = "Shoegaze",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b7c16569-3a0e-4e1c-a395-b649e91e4727"),
                            DisplayName = "Celtic",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b1cfb7fa-7ae4-44ba-ab7a-cddf29970bd8"),
                            DisplayName = "World Music",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a8226a35-aaca-4443-bd40-e82e06a86084"),
                            DisplayName = "Fusion",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("eaf5bd1b-cb38-489a-b4af-64dd351f102c"),
                            DisplayName = "Experimental",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b4487d46-8f1e-4047-975a-a347c0e6ed76"),
                            DisplayName = "IDM(Intelligent Dance Music)",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("67c8dd56-e048-47f0-8b01-d4630cdb34d4"),
                            DisplayName = "Synthpop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0ffbf458-aa0c-463a-ab0f-32ad6c322bb0"),
                            DisplayName = "Electropop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2733b259-36ff-48b8-923e-8633f819b1ca"),
                            DisplayName = "Trap",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1436a40d-dec8-40db-b665-cb6c40913669"),
                            DisplayName = "Drill",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f86163dd-adeb-4eae-969d-d3f5f17473c1"),
                            DisplayName = "Breakbeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("996683fd-2b43-47af-80a7-f4b68d97009a"),
                            DisplayName = "Downtempo",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("63faac96-9553-4ab7-acbc-f9708915d26e"),
                            DisplayName = "Ambient House",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ca3ec2df-c8aa-46f0-af7e-801f8f83c5c4"),
                            DisplayName = "Dubstep",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("278f78d9-f6bd-43b1-9002-a0013f6799c2"),
                            DisplayName = "Future Bass",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8cf9ec17-96fc-4aa6-8079-68cde50cc90b"),
                            DisplayName = "Grime",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3081a092-0c06-45c6-aa37-9f1b8852e2cc"),
                            DisplayName = "Trip-hop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("64c7e7e4-b865-421f-a3bc-2799c25bfe6f"),
                            DisplayName = "Nu Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("dc87d280-3a99-47ba-a370-fa8d6459993e"),
                            DisplayName = "Smooth Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3fbedb1f-ed0d-481e-81dc-ca72f2da198b"),
                            DisplayName = "Swing",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("159f5867-d19d-4751-8b73-f12834f93b35"),
                            DisplayName = "Bebop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b88e94ee-cd14-478a-bb42-8ebae7fefda0"),
                            DisplayName = "Big Band",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c1e659da-bc6c-416c-a65f-bd18a4b9527c"),
                            DisplayName = "Orchestral",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4a2b69a5-e7a6-4911-b38f-dd56a862fe36"),
                            DisplayName = "Choral",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fe74fe56-b342-4fad-bcc3-002d79b19e4a"),
                            DisplayName = "Phonk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5b145c00-bbf5-4eb0-9cb9-6acfabdf4937"),
                            DisplayName = "Alternative Metal",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9380b40b-ed38-4e4d-ab91-28e1ddc6d5e0"),
                            DisplayName = "Eurobeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("016b5a4b-a67c-472d-b36b-73c4c62491e3"),
                            DisplayName = "Synthwave",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b347b9c3-4751-44b4-a1d9-6e5eedc3a39e"),
                            DisplayName = "Post-hardcore",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PlaylistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PodcastEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TrackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlaylistedTracks", b =>
                {
                    b.Property<Guid>("PlaylistedTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistsId")
                        .HasColumnType("uuid");

                    b.HasKey("PlaylistedTracksId", "PlaylistsId");

                    b.HasIndex("PlaylistsId");

                    b.ToTable("PlaylistedTracks");
                });

            modelBuilder.Entity("TaggedPlaylists", b =>
                {
                    b.Property<Guid>("TaggedPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("TaggedPlaylistsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TaggedPlaylists");
                });

            modelBuilder.Entity("FollowedAlbums", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AlbumEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedAudioBookCollections", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAudioBookCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedAudioBooks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAudioBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedPlaylists", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedPodcasts", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PodcastEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedPodcastsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenredTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("GenredTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Albums")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("AudioBooksCollection")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", "AudioBookCollection")
                        .WithMany("AudioBooks")
                        .HasForeignKey("AudioBookCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("AudioBooks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioBookCollection");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", "User")
                        .WithOne("Creator")
                        .HasForeignKey("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PlaylistEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Playlists")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PodcastEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Podcasts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TrackEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AlbumEntity", "Album")
                        .WithMany("AlbumedTracks")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Tracks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PlaylistedTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaggedPlaylists", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("TaggedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.Navigation("AlbumedTracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.Navigation("AudioBooks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("AudioBooks");

                    b.Navigation("AudioBooksCollection");

                    b.Navigation("Playlists");

                    b.Navigation("Podcasts");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.UserEntity", b =>
                {
                    b.Navigation("Creator")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
