// <auto-generated />
using System;
using Melody.DataLayer.EFCore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melody.DataLayer.EFCore.Migrations
{
    [DbContext(typeof(MelodyDbContext))]
    [Migration("20240407113729_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FollowedAlbums", b =>
                {
                    b.Property<Guid>("FollowedAlbumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAlbumsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAlbums");
                });

            modelBuilder.Entity("FollowedAudioBookCollections", b =>
                {
                    b.Property<Guid>("FollowedAudioBookCollectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAudioBookCollectionsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAudioBookCollections");
                });

            modelBuilder.Entity("FollowedAudioBooks", b =>
                {
                    b.Property<Guid>("FollowedAudioBooksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAudioBooksId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAudioBooks");
                });

            modelBuilder.Entity("FollowedPlaylists", b =>
                {
                    b.Property<Guid>("FollowedPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedPlaylistsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedPlaylists");
                });

            modelBuilder.Entity("FollowedPodcasts", b =>
                {
                    b.Property<Guid>("FollowedPodcastsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedPodcastsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedPodcasts");
                });

            modelBuilder.Entity("FollowedTracks", b =>
                {
                    b.Property<Guid>("FollowedTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedTracksId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedTracks");
                });

            modelBuilder.Entity("GenredTracks", b =>
                {
                    b.Property<Guid>("GenredTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uuid");

                    b.HasKey("GenredTracksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GenredTracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("AudioBookCollections");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AudioBookCollectionId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DurationInMs")
                        .HasColumnType("bigint");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AudioBookCollectionId");

                    b.HasIndex("CreatorId");

                    b.ToTable("AudioBooks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PlaylistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PodcastEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DurationInMs")
                        .HasColumnType("bigint");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TrackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<long>("DurationInMs")
                        .HasColumnType("bigint");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlaylistedTracks", b =>
                {
                    b.Property<Guid>("PlaylistedTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistsId")
                        .HasColumnType("uuid");

                    b.HasKey("PlaylistedTracksId", "PlaylistsId");

                    b.HasIndex("PlaylistsId");

                    b.ToTable("PlaylistedTracks");
                });

            modelBuilder.Entity("TaggedPlaylists", b =>
                {
                    b.Property<Guid>("TaggedPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("TaggedPlaylistsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TaggedPlaylists");
                });

            modelBuilder.Entity("FollowedAlbums", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AlbumEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedAudioBookCollections", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAudioBookCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedAudioBooks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAudioBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedPlaylists", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedPodcasts", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PodcastEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedPodcastsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenredTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("GenredTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Albums")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("AudioBooksCollection")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", "AudioBookCollection")
                        .WithMany("AudioBooks")
                        .HasForeignKey("AudioBookCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("AudioBooks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioBookCollection");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", "User")
                        .WithOne("Creator")
                        .HasForeignKey("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PlaylistEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Playlists")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PodcastEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Podcasts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TrackEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AlbumEntity", "Album")
                        .WithMany("AlbumedTracks")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Tracks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PlaylistedTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaggedPlaylists", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("TaggedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.Navigation("AlbumedTracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.Navigation("AudioBooks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("AudioBooks");

                    b.Navigation("AudioBooksCollection");

                    b.Navigation("Playlists");

                    b.Navigation("Podcasts");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.UserEntity", b =>
                {
                    b.Navigation("Creator")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
