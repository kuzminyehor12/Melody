// <auto-generated />
using System;
using Melody.DataLayer.EFCore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Melody.DataLayer.EFCore.Migrations
{
    [DbContext(typeof(MelodyDbContext))]
    [Migration("20240511092431_UserSchemaChanged")]
    partial class UserSchemaChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FollowedAlbums", b =>
                {
                    b.Property<Guid>("FollowedAlbumsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAlbumsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAlbums");
                });

            modelBuilder.Entity("FollowedAudioBookCollections", b =>
                {
                    b.Property<Guid>("FollowedAudioBookCollectionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAudioBookCollectionsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAudioBookCollections");
                });

            modelBuilder.Entity("FollowedAudioBooks", b =>
                {
                    b.Property<Guid>("FollowedAudioBooksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedAudioBooksId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedAudioBooks");
                });

            modelBuilder.Entity("FollowedPlaylists", b =>
                {
                    b.Property<Guid>("FollowedPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedPlaylistsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedPlaylists");
                });

            modelBuilder.Entity("FollowedPodcasts", b =>
                {
                    b.Property<Guid>("FollowedPodcastsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedPodcastsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedPodcasts");
                });

            modelBuilder.Entity("FollowedTracks", b =>
                {
                    b.Property<Guid>("FollowedTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowersId")
                        .HasColumnType("uuid");

                    b.HasKey("FollowedTracksId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("FollowedTracks");
                });

            modelBuilder.Entity("GenredTracks", b =>
                {
                    b.Property<Guid>("GenredTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uuid");

                    b.HasKey("GenredTracksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GenredTracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("AudioBookCollections");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AudioBookCollectionId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AudioBookCollectionId");

                    b.HasIndex("CreatorId");

                    b.ToTable("AudioBooks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b8d15c4-a55d-4662-9b89-36f17a47dd44"),
                            DisplayName = "Pop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("45ff1e00-cd1b-4f6b-afec-574baddd1335"),
                            DisplayName = "Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b8366546-27e3-4d64-883c-58479faa3fbb"),
                            DisplayName = "Hip-hop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("43751c8b-0e0e-4b0b-bb42-37e6f2de5655"),
                            DisplayName = "R&B(Rhythm and Blues)",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("665a9f98-d49c-4acb-96b7-d6ed91345f89"),
                            DisplayName = "Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d0f3b16d-21bf-473e-88eb-543b10f7bf5f"),
                            DisplayName = "Blues",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0a346442-bfe9-44ee-9880-e7ab5c4b3121"),
                            DisplayName = "Country",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("15b60b6c-075b-4986-8f9b-9de499387223"),
                            DisplayName = "Reggae",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("30bf306b-d2c2-4bc4-9114-636bb62bbb34"),
                            DisplayName = "Electronic",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b272179c-b1ec-45cd-95d9-c3137e639a75"),
                            DisplayName = "Classical",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7ae60977-395d-47f6-9e5b-3dc5ac998a60"),
                            DisplayName = "Folk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e067c205-4b62-4de5-a84f-3b7a378a645a"),
                            DisplayName = "Indie",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0c68e776-2e59-44a5-bc3b-31a0e2b89f8f"),
                            DisplayName = "Alternative",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("78d18174-0141-4cac-872f-44832555f6a5"),
                            DisplayName = "Punk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("da2e8007-7b3e-49d1-a6df-7521f3394129"),
                            DisplayName = "Metal",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9a62157e-054a-44ac-93fa-a44cafaf0f3c"),
                            DisplayName = "Dance",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("aaebe97b-991b-476e-964e-e051d4d532fd"),
                            DisplayName = "Soul",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("125f8a2d-127e-4d3f-ad54-1e8da73c0d50"),
                            DisplayName = "Funk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("53e5fcd2-66da-4eec-a490-b7a8a88cf7a8"),
                            DisplayName = "Gospel",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b617e612-1d31-4053-81fe-01e0319d2e11"),
                            DisplayName = "Disco",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f43f4974-0cfd-476b-afe3-593f15ce6431"),
                            DisplayName = "Ska",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d111cc1a-7e29-4362-8100-c1558230f2b5"),
                            DisplayName = "Dub",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8c2649aa-cc07-4ded-a53b-00e74047d98a"),
                            DisplayName = "Techno",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bcf4cd8a-4d63-476f-86cd-0242cd430ad3"),
                            DisplayName = "House",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e259243e-3d61-4288-bb8f-0a7438706305"),
                            DisplayName = "Ambient",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6d1cfe33-7ac8-4a04-9dad-c50944ec9ac7"),
                            DisplayName = "Trance",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2b7b4bbe-ad88-49d3-8fd1-f4fc18365d80"),
                            DisplayName = "Rap",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ec81a20c-f50f-485c-98aa-33a43d0ed807"),
                            DisplayName = "Grunge",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("58eb3652-13fe-483b-9b84-a711969d24d3"),
                            DisplayName = "Reggaeton",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("59cfd3d6-e767-4612-b024-724bdf3a6972"),
                            DisplayName = "Latin",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d7dbe442-f87a-44be-b378-047c71ea130d"),
                            DisplayName = "Salsa",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d53078e3-6b0d-4c44-9d04-412ca52d1937"),
                            DisplayName = "Flamenco",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3d3a7c5e-fcb8-4b71-b1a0-9a2129ea3560"),
                            DisplayName = "Bossa Nova",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("845a951d-43f0-4e2b-9bfd-121b6f844462"),
                            DisplayName = "Afrobeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("67a5316c-683c-412c-8fb7-07247cda983e"),
                            DisplayName = "Samba",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ba4849dd-572d-4f75-928f-de29cca958c7"),
                            DisplayName = "Bluegrass",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0261cf52-29bd-4547-8d37-26f9d92b5c75"),
                            DisplayName = "Funk Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bafc4a73-09ec-44a9-8a67-2e4216e89535"),
                            DisplayName = "Hard Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c81604df-51a8-4c78-8e13-123207e15473"),
                            DisplayName = "Soft Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e33ee2ba-af21-4e08-bd17-c4d9aa53b74b"),
                            DisplayName = "Glam Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("26678720-87b5-4638-ab2d-c9186b9f50bc"),
                            DisplayName = "Psychedelic Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b9cedd92-915a-4326-9113-34eb6ca2efd4"),
                            DisplayName = "Post-rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("da606abc-72a2-4db3-b524-70cd166ffcfc"),
                            DisplayName = "Garage Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4b8554fe-601c-43d6-a467-1649d0e88882"),
                            DisplayName = "Progressive Rock",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a9e5e626-80f8-49b9-823e-795d7771395c"),
                            DisplayName = "New Wave",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("59c21fd0-55e9-4e4d-8b40-59c160db6ed6"),
                            DisplayName = "Post-punk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c7870194-43b4-4fe7-a396-cec9c8da6dfa"),
                            DisplayName = "Shoegaze",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("35999d29-4442-4b2c-848e-171745775b48"),
                            DisplayName = "Celtic",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("aeb5dd38-ee6e-47e5-9116-924eca152534"),
                            DisplayName = "World Music",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2efbf131-d04e-47e6-9284-b6a8b82b49ab"),
                            DisplayName = "Fusion",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("de731764-8d86-4780-b2cd-dcbe1b473459"),
                            DisplayName = "Experimental",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("564aa237-b212-4709-91ea-a50e82e2711e"),
                            DisplayName = "IDM(Intelligent Dance Music)",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f0fba31a-9c6a-464e-846d-11be8f22897d"),
                            DisplayName = "Synthpop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("78c4f21e-1d5c-4a15-88a5-65a02231f716"),
                            DisplayName = "Electropop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("90c81520-2184-4add-997e-714635135883"),
                            DisplayName = "Trap",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e2aaacac-47e1-41d0-b22b-1c4a1dd8d179"),
                            DisplayName = "Drill",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("443ea3e1-2123-413f-9e25-967ca67f8cfc"),
                            DisplayName = "Breakbeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("50513ad5-dbef-42f0-8379-0a62ecd9e71c"),
                            DisplayName = "Downtempo",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d5359a47-65a7-4914-8a09-a53cfe366fdd"),
                            DisplayName = "Ambient House",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fbb493ef-ccac-404f-b962-750fdabfbc79"),
                            DisplayName = "Dubstep",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ae8262e6-6936-472c-87c2-a41e8eaa59ba"),
                            DisplayName = "Future Bass",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("65a2afa0-3826-47c3-922a-122e1184ceaa"),
                            DisplayName = "Grime",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("572f257a-4a90-407a-91a6-5264e6e67900"),
                            DisplayName = "Trip-hop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("212014a6-0872-401b-939b-8d73d1ce7d2c"),
                            DisplayName = "Nu Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ee463906-fdfa-444f-b559-52e88957af77"),
                            DisplayName = "Smooth Jazz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0f8d571c-8571-4f56-b956-945b41feeb5e"),
                            DisplayName = "Swing",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fedeff1c-757c-4428-a541-dd4af042d65e"),
                            DisplayName = "Bebop",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("671db877-a5ef-4097-93ad-1995d912bd6f"),
                            DisplayName = "Big Band",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("cba624a7-9b47-4a0b-a5b8-f6d132f14149"),
                            DisplayName = "Orchestral",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fde50035-7360-4cef-830b-1971594e223d"),
                            DisplayName = "Choral",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a43a4a9b-1a7d-4411-8a1f-b0fca1cc20fc"),
                            DisplayName = "Phonk",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a5b22999-0b0f-40eb-854b-34431d3827dc"),
                            DisplayName = "Alternative Metal",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ba4faa33-5dd9-45b1-a1e6-273a9ff0f5af"),
                            DisplayName = "Eurobeat",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("24c01b09-e7bd-46c9-a65f-3839f8edb520"),
                            DisplayName = "Synthwave",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b04d8cb2-f705-4168-9a52-15588fc9b8dc"),
                            DisplayName = "Post-hardcore",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PlaylistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("ExternalIds")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PodcastEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TrackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coversheet")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<double>("DurationInMs")
                        .HasColumnType("double precision");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ListeningsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PlaylistedTracks", b =>
                {
                    b.Property<Guid>("PlaylistedTracksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistsId")
                        .HasColumnType("uuid");

                    b.HasKey("PlaylistedTracksId", "PlaylistsId");

                    b.HasIndex("PlaylistsId");

                    b.ToTable("PlaylistedTracks");
                });

            modelBuilder.Entity("TaggedPlaylists", b =>
                {
                    b.Property<Guid>("TaggedPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("TaggedPlaylistsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TaggedPlaylists");
                });

            modelBuilder.Entity("FollowedAlbums", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AlbumEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedAudioBookCollections", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAudioBookCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedAudioBooks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedAudioBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedPlaylists", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedPodcasts", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PodcastEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedPodcastsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FollowedTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenredTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("GenredTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Albums")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("AudioBooksCollection")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", "AudioBookCollection")
                        .WithMany("AudioBooks")
                        .HasForeignKey("AudioBookCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("AudioBooks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioBookCollection");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.UserEntity", "User")
                        .WithOne("Creator")
                        .HasForeignKey("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PlaylistEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Playlists")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.PodcastEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Podcasts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.TrackEntity", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.AlbumEntity", "Album")
                        .WithMany("AlbumedTracks")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Melody.DataLayer.EFCore.Entities.CreatorEntity", "Creator")
                        .WithMany("Tracks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PlaylistedTracks", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.TrackEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistedTracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaggedPlaylists", b =>
                {
                    b.HasOne("Melody.DataLayer.EFCore.Entities.PlaylistEntity", null)
                        .WithMany()
                        .HasForeignKey("TaggedPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Melody.DataLayer.EFCore.Entities.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AlbumEntity", b =>
                {
                    b.Navigation("AlbumedTracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.AudioBookCollectionEntity", b =>
                {
                    b.Navigation("AudioBooks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.CreatorEntity", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("AudioBooks");

                    b.Navigation("AudioBooksCollection");

                    b.Navigation("Playlists");

                    b.Navigation("Podcasts");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Melody.DataLayer.EFCore.Entities.UserEntity", b =>
                {
                    b.Navigation("Creator")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
